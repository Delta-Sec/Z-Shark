import json
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any
import re

from reportlab.lib import colors
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.graphics.shapes import Drawing
from reportlab.graphics.charts.linecharts import VerticalLineChart
from reportlab.graphics.charts.axes import XCategoryAxis
from reportlab.graphics.charts.axes import XValueAxis


try:
    pdfmetrics.registerFont(TTFont('Arial', 'Arial.ttf'))
    pdfmetrics.registerFont(TTFont('Arial-Bold', 'Arialbd.ttf'))
    FONT_NAME = 'Arial'
    FONT_NAME_BOLD = 'Arial-Bold'
except:
    FONT_NAME = 'Helvetica'
    FONT_NAME_BOLD = 'Helvetica-Bold'

styles = getSampleStyleSheet()
styles.add(ParagraphStyle(name='TitleStyle', fontName=FONT_NAME_BOLD, fontSize=18, leading=22, alignment=1))
styles.add(ParagraphStyle(name='SectionTitle', fontName=FONT_NAME_BOLD, fontSize=14, leading=18, spaceBefore=12, spaceAfter=6))
styles['Normal'].fontName = FONT_NAME
styles['Normal'].fontSize = 10
styles['Normal'].leading = 12
styles.add(ParagraphStyle(name='Monospace', fontName='Courier', fontSize=9, leading=11, backColor=colors.lightgrey))
styles.add(ParagraphStyle(name='Justified', fontName=FONT_NAME, fontSize=10, leading=12, alignment=4, wordWrap='LTR'))
styles.add(ParagraphStyle(name='Footer', fontName=FONT_NAME, fontSize=8, alignment=1))

SEVERITY_COLORS = {
    'HIGH': colors.Color(255 / 255, 102 / 255, 102 / 255, alpha=0.3),
    'MEDIUM': colors.Color(255 / 255, 255 / 255, 153 / 255, alpha=0.3),
    'LOW': colors.Color(153 / 255, 255 / 255, 153 / 255, alpha=0.3),
    'INFO': colors.Color(230 / 255, 230 / 255, 230 / 255, alpha=0.3),
}

def format_long_numbers(text: str) -> str:
    pattern = r'\d+\.\d{5,}'
    def replace_func(match):
        try:
            return f"{float(match.group(0)):.4f}"
        except ValueError:
            return match.group(0)
    return re.sub(pattern, replace_func, text)

def get_severity_from_json(det: dict) -> str:
    sev_value = det.get('severity', 0.0)
    if float(sev_value) >= 0.7:
        return 'HIGH'
    elif float(sev_value) >= 0.3:
        return 'MEDIUM'
    elif float(sev_value) > 0.0:
        return 'LOW'
    else:
        return 'INFO'

def header_footer_template(canvas, doc):
    canvas.saveState()
    canvas.setFont(FONT_NAME_BOLD, 18)
    canvas.drawString(doc.leftMargin, doc.height + doc.topMargin - 20, "Z-Shark Network Analysis Report")
    canvas.setStrokeColor(colors.grey)
    canvas.line(doc.leftMargin, doc.height + doc.topMargin - 30, doc.width + doc.leftMargin, doc.height + doc.topMargin - 30)
    canvas.setFont(FONT_NAME, 8)
    page_num_text = f"Page {canvas.getPageNumber()}"
    canvas.drawString(doc.leftMargin, 0.75 * inch, page_num_text)
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    canvas.drawRightString(doc.width + doc.leftMargin, 0.75 * inch, f"Generated: {timestamp}")
    signature_line = "Generated by Z-Shark â€” DeltaSec Labs"
    canvas.drawCentredString(doc.width / 2 + doc.leftMargin, 0.75 * inch, signature_line)
    canvas.restoreState()

def create_rate_chart(analysis_data: Dict[str, Any], rate_type: str):
    window_stats = analysis_data.get('window_stats', [])
    if not window_stats:
        return Paragraph(f"<i>No window statistics available to generate {rate_type} chart.</i>", styles['Normal'])

    rate_key = 'pps' if rate_type == 'PPS' else 'bps'
    line_color = colors.blue if rate_type == 'PPS' else colors.red

    rate_data = [[]]
    time_labels = []
    for i, window in enumerate(window_stats):
        time_labels.append(f"W{i+1}")
        rate_data[0].append(window.get(rate_key, 0))

    drawing = Drawing(450, 200)
    chart = VerticalLineChart()
    chart.x = 50
    chart.y = 30
    chart.height = 150
    chart.width = 350
    chart.data = rate_data

    max_rate = max(rate_data[0]) if rate_data[0] else 10
    chart.valueAxis.valueMin = 0
    chart.valueAxis.valueMax = max_rate * 1.1
    chart.valueAxis.valueStep = max(1, int(max_rate / 5))
    chart.valueAxis.labels.fontName = FONT_NAME
    chart.valueAxis.labels.fontSize = 8

    chart.categoryAxis.categoryNames = time_labels
    chart.categoryAxis.labels.angle = 30
    chart.categoryAxis.labels.fontName = FONT_NAME
    chart.categoryAxis.labels.fontSize = 6
    chart.categoryAxis.labels.boxAnchor = 'n'

    chart.lines[0].strokeColor = line_color
    chart.lines[0].strokeWidth = 2
    drawing.add(chart)
    return drawing

def create_top_talkers_table(analysis_data: Dict[str, Any], key: str, title: str, top_n: int = 5):
    if key == 'top_source_ips':
        stats = analysis_data.get('top_source_ips', [])
        header = ["Source IP", "Packets", "Bytes"]
        col_widths = [2.0 * inch, 1.0 * inch, 1.0 * inch]
    elif key == 'top_dest_ports':
        stats = analysis_data.get('top_dest_ports', [])
        header = ["Dest Port", "Packets", "Bytes"]
        col_widths = [1.5 * inch, 1.0 * inch, 1.0 * inch]
    else:
        return []

    stats.sort(key=lambda x: x.get('packets', 0), reverse=True)
    table_data = [header]
    for stat in stats[:top_n]:
        if key == 'top_source_ips':
            row = [stat['ip'], f"{stat['packets']:,}", f"{stat['bytes'] / 1024:.2f} KB"]
        else:
            row = [str(stat['port']), f"{stat['packets']:,}", f"{stat['bytes'] / 1024:.2f} KB"]
        table_data.append(row)

    table = Table(table_data, colWidths=col_widths)
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.Color(204/255, 229/255, 255/255)),
        ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
        ('FONTNAME', (0, 0), (-1, 0), FONT_NAME_BOLD),
        ('FONTNAME', (0, 1), (-1, -1), FONT_NAME),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('VALIGN', (0, 0), (-1, -1), 'TOP'),
        ('LEFTPADDING', (0, 0), (-1, -1), 6),
        ('RIGHTPADDING', (0, 0), (-1, -1), 6),
    ]))
    story = [Paragraph(title, styles['SectionTitle']), table, Spacer(1, 0.2 * inch)]
    return story

# --- MAIN FUNCTION ---
def generate_pdf_report(analysis_json_path: str, pdf_output_path: str):
    try:
        with open(analysis_json_path, 'r') as f:
            analysis_data = json.load(f)
    except Exception as e:
        raise IOError(f"Could not load analysis JSON file: {e}")

    doc = SimpleDocTemplate(
        pdf_output_path,
        pagesize=letter,
        leftMargin=0.75*inch,
        rightMargin=0.75*inch,
        topMargin=1.25*inch,
        bottomMargin=0.75*inch
    )

    story: List[Any] = []

    story.append(Paragraph("Z-Shark Network Analysis Report", styles['TitleStyle']))
    story.append(Spacer(1, 0.2*inch))

    story.append(Paragraph("1. Executive Summary", styles['SectionTitle']))
    start_time = datetime.fromisoformat(analysis_data.get('start_time', datetime.now().isoformat()))
    end_time = datetime.fromisoformat(analysis_data.get('end_time', datetime.now().isoformat()))
    duration = (end_time - start_time).total_seconds()

    summary_data = [
        ["Metric", "Value"],
        ["File Analyzed", Path(analysis_json_path).stem.replace('_analysis','')],
        ["Analysis Start Time", start_time.strftime("%Y-%m-%d %H:%M:%S")],
        ["Analysis End Time", end_time.strftime("%Y-%m-%d %H:%M:%S")],
        ["Total Duration", f"{duration:.2f} seconds"],
        ["Total Packets", f"{analysis_data.get('total_packets',0):,}"],
        ["Total Bytes", f"{analysis_data.get('total_bytes',0)/(1024*1024):.2f} MB"],
        ["Incidents Detected", len(analysis_data.get('detections', []))]
    ]

    summary_table = Table(summary_data, colWidths=[2.5*inch,4.5*inch])
    summary_table.setStyle(TableStyle([
        ('BACKGROUND',(0,0),(-1,0),colors.Color(204/255,229/255,255/255)),
        ('GRID',(0,0),(-1,-1),0.5,colors.grey),
        ('FONTNAME',(0,0),(-1,0),FONT_NAME_BOLD),
        ('FONTNAME',(0,1),(-1,-1),FONT_NAME),
        ('FONTSIZE',(0,0),(-1,-1),10),
        ('LEFTPADDING',(0,0),(-1,-1),6),
        ('RIGHTPADDING',(0,0),(-1,-1),6),
    ]))
    story.append(summary_table)
    story.append(Spacer(1,0.2*inch))

    story.append(Paragraph("2. Packet Rate Over Time (PPS)", styles['SectionTitle']))
    story.append(create_rate_chart(analysis_data,'PPS'))
    story.append(Spacer(1,0.2*inch))

    story.append(Paragraph("3. Network Flow Statistics", styles['SectionTitle']))
    story.extend(create_top_talkers_table(analysis_data,'top_source_ips','Top 5 Source IPs',top_n=5))
    story.extend(create_top_talkers_table(analysis_data,'top_dest_ports','Top 5 Destination Ports',top_n=5))
    story.append(Spacer(1,0.2*inch))

    story.append(Paragraph("4. Detected Incidents", styles['SectionTitle']))
    detections = analysis_data.get('detections', [])

    table_data = [[
        Paragraph("Time", styles['Normal']),
        Paragraph("Severity", styles['Normal']),
        Paragraph("Label", styles['Normal']),
        Paragraph("Model", styles['Normal']),
        Paragraph("Justification", styles['Normal'])
    ]]

    for det in detections:
        score = det.get('score',0.0)
        sev = get_severity_from_json(det)
        justification_text = format_long_numbers(det.get('justification','N/A'))
        if len(justification_text) > 500:
            justification_text = justification_text[:500] + "..."
        justification_paragraph = Paragraph(justification_text, styles['Justified'])

        if sev == 'HIGH':
            severity_style = ParagraphStyle(name='SeverityStyle', fontName=FONT_NAME_BOLD, fontSize=10, textColor=colors.red)
        elif sev == 'MEDIUM':
            severity_style = ParagraphStyle(name='SeverityStyle', fontName=FONT_NAME_BOLD, fontSize=10, textColor=colors.orange)
        elif sev == 'LOW':
            severity_style = ParagraphStyle(name='SeverityStyle', fontName=FONT_NAME_BOLD, fontSize=10, textColor=colors.green)
        else:
            severity_style = ParagraphStyle(name='SeverityStyle', fontName=FONT_NAME_BOLD, fontSize=10, textColor=colors.black)

        row = [
            Paragraph(datetime.fromisoformat(det['timestamp']).strftime("%H:%M:%S"), styles['Normal']),
            Paragraph(sev, severity_style),
            Paragraph(det.get('label','N/A'), styles['Normal']),
            Paragraph(det.get('model_name', det.get('model','N/A')), styles['Normal']),
            justification_paragraph
        ]
        table_data.append(row)

    col_widths = [0.8*inch,0.8*inch,1.5*inch,1.5*inch,3.0*inch]
    detection_table = Table(table_data, colWidths=col_widths)

    detection_table.setStyle(TableStyle([
        ('BACKGROUND',(0,0),(-1,0),colors.Color(153/255,204/255,255/255)),
        ('GRID',(0,0),(-1,-1),0.5,colors.grey),
        ('FONTNAME',(0,0),(-1,0),FONT_NAME_BOLD),
        ('FONTNAME',(0,1),(-1,-1),FONT_NAME),
        ('FONTSIZE',(0,0),(-1,-1),9),
        ('VALIGN',(0,0),(-1,-1),'TOP'),
        ('LEFTPADDING',(0,0),(-1,-1),4),
        ('RIGHTPADDING',(0,0),(-1,-1),4),
    ]))
    story.append(detection_table)
    story.append(Spacer(1,0.2*inch))

    story.append(Paragraph("5. Mitigation Recommendations", styles['SectionTitle']))
    recommendations = [
        "Isolate the source IP addresses identified in HIGH severity incidents immediately.",
        "Review firewall and IDS/IPS logs for correlation with the detected events.",
        "Implement rate-limiting policies on network devices to mitigate future volumetric attacks (e.g., DDoS).",
        "Update network device firmware and security patches.",
        "Conduct a full forensic analysis on any hosts identified in ARP Spoofing incidents."
    ]
    for rec in recommendations:
        story.append(Paragraph(f"â€¢ {rec}", styles['Normal']))
        story.append(Spacer(1,0.05*inch))

    doc.build(story, onFirstPage=header_footer_template, onLaterPages=header_footer_template)
